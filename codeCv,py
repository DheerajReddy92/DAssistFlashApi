from flask import Flask, request, jsonify
import cv2
import numpy as np

app = Flask(__name__)

    # Load Haar cascade for face detection
face_cascade =     cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')

def eye_aspect_ratio(eye):
    A = np.linalg.norm(eye[1] - eye[5])
    B = np.linalg.norm(eye[2] - eye[4])
    C = np.linalg.norm(eye[0] - eye[3])
    return (A + B) / (2.0 * C)

EAR_THRESHOLD = 0.25

@app.route('/api/detect_drowsiness', methods=['POST'])
def detect_drowsiness():
    file = request.files['frame']
    npimg = np.frombuffer(file.read(), np.uint8)
    img = cv2.imdecode(npimg, cv2.IMREAD_COLOR)

    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5)

    for (x, y, w, h) in faces:
        roi_gray = gray[y:y+h, x:x+w]
        roi_color = img[y:y+h, x:x+w]

            # Detect eyes within the face region
        eyes = eye_cascade.detectMultiScale(roi_gray)
        if len(eyes) >= 2:  # Ensure at least two eyes are detected
            left_eye = eyes[0]  # Assuming the first detected eye is the left one
            right_eye = eyes[1]  # Assuming the second detected eye is the right one

            # Calculate EAR for both eyes
            left_eye_points = np.array([[left_eye[0], left_eye[1]], 
                                            [left_eye[0] + left_eye[2], left_eye[1]], 
                                            [left_eye[0], left_eye[1] + left_eye[3]], 
                                             [left_eye[0] + left_eye[2], left_eye[1] + left_eye[3]]])
            right_eye_points = np.array([[right_eye[0], right_eye[1]], 
                                              [right_eye[0] + right_eye[2], right_eye[1]], 
                                              [right_eye[0], right_eye[1] + right_eye[3]], 
                                              [right_eye[0] + right_eye[2], right_eye[1] + right_eye[3]]])

            left_ear = eye_aspect_ratio(left_eye_points)
            right_ear = eye_aspect_ratio(right_eye_points)
            ear = (left_ear + right_ear) / 2.0

            if ear < EAR_THRESHOLD:
                return jsonify({'alert': 'Drowsiness detected!'})

    return jsonify({'alert': ''})

if __name__ == '__main__':
    app.run(debug=True)